{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Data Loading and Cleaning"
      ],
      "metadata": {
        "id": "RiBOoq7Sc8Y7"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "olJ_1vRs6xzT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d51b719b-ec16-4bda-8a88-061fdf77ae32"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- First 5 Rows (df.head()) ---\n",
            "   Order_ID Order_Date     Customer_Name          City        State  Region  \\\n",
            "0         1   08-23-23      Bianca Brown       Jackson  Mississippi   South   \n",
            "1         2   12-20-24     Jared Edwards  Grand Rapids     Michigan  Centre   \n",
            "2         3   01-29-24      Susan Valdez   Minneapolis    Minnesota  Centre   \n",
            "3         4   11-29-24     Tina Williams   Tallahassee      Florida   South   \n",
            "4         5   09-21-23  Catherine Gordon     Baltimore     Maryland    East   \n",
            "\n",
            "         Country            Category       Sub_Category      Product_Name  \\\n",
            "0  United States         Accessories  Small Electronics        Phone Case   \n",
            "1  United States         Accessories  Small Electronics    Charging Cable   \n",
            "2  United States  Clothing & Apparel         Sportswear  Nike Air Force 1   \n",
            "3  United States  Clothing & Apparel         Sportswear  Adidas Tracksuit   \n",
            "4  United States         Accessories               Bags          Backpack   \n",
            "\n",
            "   Quantity   Unit_Price    Revenue    Profit   \n",
            "0         3        201.01     603.03    221.49  \n",
            "1         4         74.30     297.20     97.09  \n",
            "2         1         68.19      68.19     25.47  \n",
            "3         3        209.64     628.92    231.38  \n",
            "4         1        216.63     216.63     42.46  \n",
            "\n",
            "==================================================\n",
            "\n",
            "--- Data Info (df.info()) ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200000 entries, 0 to 199999\n",
            "Data columns (total 14 columns):\n",
            " #   Column         Non-Null Count   Dtype  \n",
            "---  ------         --------------   -----  \n",
            " 0   Order_ID       200000 non-null  int64  \n",
            " 1   Order_Date     200000 non-null  object \n",
            " 2   Customer_Name  200000 non-null  object \n",
            " 3   City           200000 non-null  object \n",
            " 4   State          200000 non-null  object \n",
            " 5   Region         200000 non-null  object \n",
            " 6   Country        200000 non-null  object \n",
            " 7   Category       200000 non-null  object \n",
            " 8   Sub_Category   200000 non-null  object \n",
            " 9   Product_Name   200000 non-null  object \n",
            " 10  Quantity       200000 non-null  int64  \n",
            " 11   Unit_Price    200000 non-null  float64\n",
            " 12   Revenue       200000 non-null  float64\n",
            " 13   Profit        200000 non-null  float64\n",
            "dtypes: float64(3), int64(2), object(9)\n",
            "memory usage: 21.4+ MB\n",
            "\n",
            "==================================================\n",
            "\n",
            "--- Descriptive Statistics (df.describe()) ---\n",
            "            Order_ID       Quantity    Unit_Price        Revenue   \\\n",
            "count  200000.000000  200000.000000  200000.000000  200000.000000   \n",
            "mean   100000.500000       1.854000     382.855615     712.038725   \n",
            "std     57735.171256       1.100536     276.870235     742.471556   \n",
            "min         1.000000       1.000000      17.030000      17.030000   \n",
            "25%     50000.750000       1.000000     162.760000     229.187500   \n",
            "50%    100000.500000       1.000000     303.545000     464.880000   \n",
            "75%    150000.250000       2.000000     562.252500     881.302500   \n",
            "max    200000.000000      11.000000    1432.000000    9014.250000   \n",
            "\n",
            "             Profit   \n",
            "count  200000.000000  \n",
            "mean      157.743041  \n",
            "std       155.689581  \n",
            "min         3.920000  \n",
            "25%        59.210000  \n",
            "50%       109.530000  \n",
            "75%       199.402500  \n",
            "max      2763.720000  \n"
          ]
        }
      ],
      "source": [
        "# --- 1. IMPORT OUR TOOL ---\n",
        "# We import the pandas library and give it the nickname 'pd'\n",
        "import pandas as pd\n",
        "\n",
        "# --- 2. LOAD THE DATA ---\n",
        "# This is the name of the file you just uploaded.\n",
        "# If your file has a different name, change it here!\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "\n",
        "# We use the pd.read_csv() function to load it into a DataFrame called 'df'\n",
        "df = pd.read_csv(file_name)\n",
        "\n",
        "\n",
        "# --- 3. THE \"HEAD CHECK\" (First 5 rows) ---\n",
        "# We use print() to give our output a clean title\n",
        "print(\"--- First 5 Rows (df.head()) ---\")\n",
        "# df.head() shows us the top 5 rows to confirm it loaded correctly\n",
        "print(df.head())\n",
        "\n",
        "# We print a separator line to keep our output tidy\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "\n",
        "\n",
        "# --- 4. THE \"HEALTH CHECK\" (Info & Data Types) ---\n",
        "print(\"--- Data Info (df.info()) ---\")\n",
        "# df.info() gives us the \"medical report\": column names, row counts, and data types\n",
        "# It prints its own output, so we don't need to use print() on it.\n",
        "df.info()\n",
        "\n",
        "# Print another separator\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "\n",
        "\n",
        "# --- 5. THE \"VITALS\" (Descriptive Statistics) ---\n",
        "print(\"--- Descriptive Statistics (df.describe()) ---\")\n",
        "# df.describe() gives us the core stats (mean, median, std, etc.) for all NUMERIC columns\n",
        "print(df.describe())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Statistical Analysis (Hypothesis Testing)"
      ],
      "metadata": {
        "id": "zXEXX6SJdK-h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 1. IMPORT OUR TOOLS ---\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import scipy.stats as stats\n",
        "\n",
        "# --- 1.A RE-LOAD THE DATA ---\n",
        "# (In case you restarted your notebook, let's re-load the data)\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "\n",
        "# --- 1.B FIX THE ERROR: Clean Column Names ---\n",
        "print(\"--- 1.B Cleaning Column Names ---\")\n",
        "print(\"Original column names:\", df.columns.to_list())\n",
        "# This line removes leading/trailing spaces from ALL column names\n",
        "df.columns = df.columns.str.strip()\n",
        "print(\"Cleaned column names:\", df.columns.to_list())\n",
        "print(\"FIXED! The columns are now clean.\\n\")\n",
        "\n",
        "# --- 2. VISUAL TEST: THE HISTOGRAM ---\n",
        "print(\"--- 2.1 Visual Test: Histogram for Revenue ---\")\n",
        "\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Now this line will work because the column is correctly named 'Revenue'\n",
        "sns.histplot(df['Revenue'], kde=True, bins=50, color='blue')\n",
        "\n",
        "plt.title('Distribution of Revenue', fontsize=16)\n",
        "plt.xlabel('Revenue', fontsize=12)\n",
        "plt.ylabel('Frequency (Count)', fontsize=12)\n",
        "plt.show() # Show the plot\n",
        "\n",
        "\n",
        "# --- 3. STATISTICAL TEST: THE SHAPIRO-WILK TEST ---\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "print(\"--- 3.1 Statistical Test: Shapiro-Wilk Test ---\")\n",
        "\n",
        "# Take a random 5,000-row sample to test\n",
        "revenue_sample = df['Revenue'].sample(5000)\n",
        "\n",
        "# Run the test on our sample\n",
        "shapiro_stat, shapiro_p_value = stats.shapiro(revenue_sample)\n",
        "\n",
        "print(f\"Shapiro-Wilk Statistic: {shapiro_stat}\")\n",
        "print(f\"P-value: {shapiro_p_value}\")\n",
        "\n",
        "# --- 4. INTERPRET THE P-VALUE ---\n",
        "alpha = 0.05\n",
        "if shapiro_p_value <= alpha:\n",
        "    print(\"\\nConclusion: The p-value is less than or equal to 0.05.\")\n",
        "    print(\"We REJECT the null hypothesis.\")\n",
        "    print(\"The data is considered NOT NORMALLY DISTRIBUTED.\")\n",
        "else:\n",
        "    print(\"\\nConclusion: The p-value is greater than 0.05.\")\n",
        "    print(\"We FAIL TO REJECT the null hypothesis.\")\n",
        "    print(\"The data is considered NORMALLY DISTRIBUTED.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 868
        },
        "id": "UZ_P91IHEbHv",
        "outputId": "ce81c3d7-4345-4b59-f3ba-9095d4e2916d"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1.B Cleaning Column Names ---\n",
            "Original column names: ['Order_ID', 'Order_Date', 'Customer_Name', 'City', 'State', 'Region', 'Country', 'Category', 'Sub_Category', 'Product_Name', 'Quantity', ' Unit_Price ', ' Revenue ', ' Profit ']\n",
            "Cleaned column names: ['Order_ID', 'Order_Date', 'Customer_Name', 'City', 'State', 'Region', 'Country', 'Category', 'Sub_Category', 'Product_Name', 'Quantity', 'Unit_Price', 'Revenue', 'Profit']\n",
            "FIXED! The columns are now clean.\n",
            "\n",
            "--- 2.1 Visual Test: Histogram for Revenue ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "\n",
            "--- 3.1 Statistical Test: Shapiro-Wilk Test ---\n",
            "Shapiro-Wilk Statistic: 0.7470088051133474\n",
            "P-value: 4.125163903154446e-66\n",
            "\n",
            "Conclusion: The p-value is less than or equal to 0.05.\n",
            "We REJECT the null hypothesis.\n",
            "The data is considered NOT NORMALLY DISTRIBUTED.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# We already imported 'scipy.stats as stats', so we're ready to go.\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "\n",
        "# --- 0. Reload and Clean Data (Good Practice) ---\n",
        "# Let's run this again just in case, to ensure 'df' is clean.\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "\n",
        "# --- 1. TEST 1: Two-Group Test (Mann-Whitney U) ---\n",
        "print(\"--- Test 1: Mann-Whitney U Test (like Assignment Part B) ---\")\n",
        "print(\"Question: Is there a significant difference in Revenue between the East and West regions?\\n\")\n",
        "\n",
        "# H₀ (Null Hypothesis): The distribution of Revenue is the SAME for both regions.\n",
        "# H₁ (Alt. Hypothesis): The distribution of Revenue is DIFFERENT for the two regions.\n",
        "\n",
        "# First, we need to create our two groups\n",
        "group_east = df[df['Region'] == 'East']['Revenue']\n",
        "group_west = df[df['Region'] == 'West']['Revenue']\n",
        "\n",
        "# Run the test\n",
        "# We add 'nan_policy='omit'' just in case, though we know we have no NaNs.\n",
        "u_stat, p_value_mw = stats.mannwhitneyu(group_east, group_west, alternative='two-sided')\n",
        "\n",
        "print(f\"Mann-Whitney U Statistic: {u_stat}\")\n",
        "print(f\"P-value: {p_value_mw}\")\n",
        "\n",
        "# Interpret the result\n",
        "alpha = 0.05\n",
        "if p_value_mw <= alpha:\n",
        "    print(\"\\nConclusion: The p-value is less than or equal to 0.05.\")\n",
        "    print(\"We REJECT the null hypothesis.\")\n",
        "    print(\">> There IS a statistically significant difference in Revenue between the East and West regions.\")\n",
        "else:\n",
        "    print(\"\\nConclusion: The p-value is greater than 0.05.\")\n",
        "    print(\"We FAIL TO REJECT the null hypothesis.\")\n",
        "    print(\">> There is NO significant difference in Revenue between the East and West regions.\")\n",
        "\n",
        "\n",
        "# --- 2. TEST 2: Multi-Group Test (Kruskal-Wallis) ---\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "print(\"--- Test 2: Kruskal-Wallis Test (like Assignment Part C) ---\")\n",
        "print(\"Question: Does Profit differ significantly across the main product Categories?\\n\")\n",
        "\n",
        "# H₀ (Null Hypothesis): The distributions of Profit are the SAME for all categories.\n",
        "# H₁ (Alt. Hypothesis): At least one category has a DIFFERENT Profit distribution.\n",
        "\n",
        "# Find the unique categories\n",
        "categories = df['Category'].unique()\n",
        "print(f\"Categories to compare: {categories}\\n\")\n",
        "\n",
        "# Create a list of 'samples', one for each category\n",
        "samples = []\n",
        "for category in categories:\n",
        "    samples.append(df[df['Category'] == category]['Profit'])\n",
        "\n",
        "# Run the test on all our samples\n",
        "h_stat, p_value_kw = stats.kruskal(*samples)\n",
        "\n",
        "print(f\"Kruskal-Wallis H Statistic: {h_stat}\")\n",
        "print(f\"P-value: {p_value_kw}\")\n",
        "\n",
        "# Interpret the result\n",
        "if p_value_kw <= alpha:\n",
        "    print(\"\\nConclusion: The p-value is less than or equal to 0.05.\")\n",
        "    print(\"We REJECT the null hypothesis.\")\n",
        "    print(\">> At least one product Category has a significantly different Profit distribution.\")\n",
        "else:\n",
        "    print(\"\\nConclusion: The p-value is greater than 0.05.\")\n",
        "    print(\"We FAIL TO REJECT the null hypothesis.\")\n",
        "    print(\">> There is NO significant difference in Profit across product categories.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7_hv7rPoGrCf",
        "outputId": "19fa9da0-d0c7-4992-bdb3-503aa7407aed"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Test 1: Mann-Whitney U Test (like Assignment Part B) ---\n",
            "Question: Is there a significant difference in Revenue between the East and West regions?\n",
            "\n",
            "Mann-Whitney U Statistic: 1782092952.5\n",
            "P-value: 7.704491751411705e-300\n",
            "\n",
            "Conclusion: The p-value is less than or equal to 0.05.\n",
            "We REJECT the null hypothesis.\n",
            ">> There IS a statistically significant difference in Revenue between the East and West regions.\n",
            "\n",
            "==================================================\n",
            "\n",
            "--- Test 2: Kruskal-Wallis Test (like Assignment Part C) ---\n",
            "Question: Does Profit differ significantly across the main product Categories?\n",
            "\n",
            "Categories to compare: ['Accessories' 'Clothing & Apparel' 'Electronics' 'Home & Furniture']\n",
            "\n",
            "Kruskal-Wallis H Statistic: 15465.22595140988\n",
            "P-value: 0.0\n",
            "\n",
            "Conclusion: The p-value is less than or equal to 0.05.\n",
            "We REJECT the null hypothesis.\n",
            ">> At least one product Category has a significantly different Profit distribution.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 1. IMPORT OUR TOOLS ---\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np # Import numpy for our math transformation\n",
        "\n",
        "# --- 2. RELOAD AND CLEAN DATA ---\n",
        "# This is our standard starting point to ensure df is clean\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "# --- 3. TASK 1: CORRELATION HEATMAP (Feature Selection) ---\n",
        "print(\"--- 3.1 Correlation Heatmap (Numeric Features) ---\")\n",
        "\n",
        "# Select only the numeric columns for our correlation matrix\n",
        "numeric_cols = df[['Quantity', 'Unit_Price', 'Revenue', 'Profit']]\n",
        "\n",
        "# Calculate the correlation matrix\n",
        "corr_matrix = numeric_cols.corr()\n",
        "\n",
        "# Plot the heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "# annot=True shows the numbers; cmap='coolwarm' is a nice color scheme\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "plt.title('Correlation Heatmap', fontsize=16)\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# --- 4. TASK 2: FIXING SKEW (Log Transformation) ---\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "print(\"--- 4.1 Fixing Skew: Log Transform of Revenue ---\")\n",
        "\n",
        "# 1. Create the new 'log_Revenue' column\n",
        "# We use np.log() from the numpy library\n",
        "# We add 1 (np.log1p) to avoid errors if any Revenue was 0\n",
        "df['log_Revenue'] = np.log1p(df['Revenue'])\n",
        "\n",
        "# 2. Show the \"Before vs. After\" plots\n",
        "plt.figure(figsize=(15, 6))\n",
        "\n",
        "# Subplot 1: Original Skewed Data\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(df['Revenue'], kde=True, bins=50, color='blue')\n",
        "plt.title('Original Revenue Distribution (Skewed)', fontsize=14)\n",
        "\n",
        "# Subplot 2: New Transformed Data\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.histplot(df['log_Revenue'], kde=True, bins=50, color='green')\n",
        "plt.title('Log-Transformed Revenue Distribution (Better!)', fontsize=14)\n",
        "\n",
        "plt.suptitle('Before vs. After Log Transformation', fontsize=18)\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# --- 5. TASK 3: ENCODING CATEGORICAL DATA ---\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "print(\"--- 5.1 Encoding 'Category' and 'Region' ---\")\n",
        "\n",
        "# We use pandas 'get_dummies' to create new 0/1 columns\n",
        "# We set 'drop_first=True' to avoid a statistics trap called the \"dummy variable trap\"\n",
        "encoded_df = pd.get_dummies(df[['Category', 'Region']], drop_first=True)\n",
        "\n",
        "# Now, join these new 0/1 columns back to our main DataFrame\n",
        "df = pd.concat([df, encoded_df], axis=1)\n",
        "\n",
        "print(\"DataFrame with new encoded columns (see end of table):\")\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "rxDK9bVfICdg",
        "outputId": "77786c4f-7d96-4bc8-8bd6-eaf85f5cc8a4"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 3.1 Correlation Heatmap (Numeric Features) ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "\n",
            "--- 4.1 Fixing Skew: Log Transform of Revenue ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "\n",
            "--- 5.1 Encoding 'Category' and 'Region' ---\n",
            "DataFrame with new encoded columns (see end of table):\n",
            "   Order_ID Order_Date     Customer_Name          City        State  Region  \\\n",
            "0         1   08-23-23      Bianca Brown       Jackson  Mississippi   South   \n",
            "1         2   12-20-24     Jared Edwards  Grand Rapids     Michigan  Centre   \n",
            "2         3   01-29-24      Susan Valdez   Minneapolis    Minnesota  Centre   \n",
            "3         4   11-29-24     Tina Williams   Tallahassee      Florida   South   \n",
            "4         5   09-21-23  Catherine Gordon     Baltimore     Maryland    East   \n",
            "\n",
            "         Country            Category       Sub_Category      Product_Name  \\\n",
            "0  United States         Accessories  Small Electronics        Phone Case   \n",
            "1  United States         Accessories  Small Electronics    Charging Cable   \n",
            "2  United States  Clothing & Apparel         Sportswear  Nike Air Force 1   \n",
            "3  United States  Clothing & Apparel         Sportswear  Adidas Tracksuit   \n",
            "4  United States         Accessories               Bags          Backpack   \n",
            "\n",
            "   ...  Unit_Price  Revenue  Profit  log_Revenue  Category_Clothing & Apparel  \\\n",
            "0  ...      201.01   603.03  221.49     6.403624                        False   \n",
            "1  ...       74.30   297.20   97.09     5.697764                        False   \n",
            "2  ...       68.19    68.19   25.47     4.236856                         True   \n",
            "3  ...      209.64   628.92  231.38     6.445593                         True   \n",
            "4  ...      216.63   216.63   42.46     5.382796                        False   \n",
            "\n",
            "   Category_Electronics  Category_Home & Furniture  Region_East  Region_South  \\\n",
            "0                 False                      False        False          True   \n",
            "1                 False                      False        False         False   \n",
            "2                 False                      False        False         False   \n",
            "3                 False                      False        False          True   \n",
            "4                 False                      False         True         False   \n",
            "\n",
            "   Region_West  \n",
            "0        False  \n",
            "1        False  \n",
            "2        False  \n",
            "3        False  \n",
            "4        False  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Engineering (Date Features)"
      ],
      "metadata": {
        "id": "jnexWzYFdxi5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 1. IMPORT OUR TOOLS ---\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "# Import the tools we need from scikit-learn (the main ML library)\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# --- 2. RELOAD AND PREPARE DATA ---\n",
        "# This block runs all our prep steps from before, so this cell works on its own.\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "df['log_Revenue'] = np.log1p(df['Revenue'])\n",
        "encoded_df = pd.get_dummies(df[['Category', 'Region']], drop_first=True)\n",
        "df = pd.concat([df, encoded_df], axis=1)\n",
        "\n",
        "# --- 3. DEFINE OUR 'X' (Features) and 'y' (Target) ---\n",
        "print(\"--- 3. Defining Features (X) and Target (y) ---\")\n",
        "\n",
        "# Our target 'y' is the 'log_Revenue' we created\n",
        "y = df['log_Revenue']\n",
        "\n",
        "# Our features 'X' are the columns we've tested and encoded\n",
        "feature_columns = [\n",
        "    'Quantity',\n",
        "    'Unit_Price',\n",
        "    'Profit',\n",
        "    'Category_Clothing & Apparel', 'Category_Electronics', 'Category_Home & Furniture',\n",
        "    'Region_East', 'Region_South', 'Region_West'\n",
        "]\n",
        "X = df[feature_columns]\n",
        "\n",
        "print(\"Target 'y' (log_Revenue) is defined.\")\n",
        "print(f\"Features 'X' are defined with {len(feature_columns)} columns.\\n\")\n",
        "\n",
        "# --- 4. SPLIT DATA INTO TRAINING AND TESTING SETS ---\n",
        "# We'll use 80% of the data for training and 20% for testing.\n",
        "# 'random_state=42' ensures we get the same \"random\" split every time we run this.\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "print(\"--- 4. Data Splitting ---\")\n",
        "print(f\"Training set has {X_train.shape[0]} rows.\")\n",
        "print(f\"Testing set has {X_test.shape[0]} rows.\\n\")\n",
        "\n",
        "# --- 5. TRAIN THE LINEAR REGRESSION MODEL ---\n",
        "print(\"--- 5. Training the Model ---\")\n",
        "# Create an instance of the model\n",
        "model = LinearRegression()\n",
        "\n",
        "# \"Fit\" the model to our training data (this is the \"learning\" part)\n",
        "model.fit(X_train, y_train)\n",
        "print(\"Model training is complete!\\n\")\n",
        "\n",
        "# --- 6. EVALUATE THE MODEL ---\n",
        "print(\"--- 6. Model Evaluation ---\")\n",
        "# Use our trained model to make predictions on the 'X_test' data\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Calculate our two key metrics\n",
        "# R-squared: What % of variance in log_Revenue can we explain?\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "# RMSE: How far off are our predictions, on average? (Lower is better)\n",
        "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "\n",
        "print(f\"R-squared (R²): {r2:.4f}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\\n\")\n",
        "\n",
        "# --- 7. FINAL INTERPRETATION ---\n",
        "print(\"--- 7. Interpretation ---\")\n",
        "print(f\"Our model can explain {r2 * 100:.2f}% of the variance in (log-transformed) Revenue.\")\n",
        "print(\"This is a very strong result!\\n\")\n",
        "\n",
        "# Bonus: Let's see which features were most important\n",
        "print(\"--- Most Important Features (Model Coefficients) ---\")\n",
        "# 'model.coef_' shows how much 'log_Revenue' changes for a 1-unit change in each feature\n",
        "importance = pd.Series(model.coef_, index=X.columns)\n",
        "print(importance.sort_values(ascending=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pQhvhFswKCvR",
        "outputId": "43bb25e1-7680-4ddc-bce1-5a2d10e2a40e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 3. Defining Features (X) and Target (y) ---\n",
            "Target 'y' (log_Revenue) is defined.\n",
            "Features 'X' are defined with 9 columns.\n",
            "\n",
            "--- 4. Data Splitting ---\n",
            "Training set has 160000 rows.\n",
            "Testing set has 40000 rows.\n",
            "\n",
            "--- 5. Training the Model ---\n",
            "Model training is complete!\n",
            "\n",
            "--- 6. Model Evaluation ---\n",
            "R-squared (R²): 0.8775\n",
            "Root Mean Squared Error (RMSE): 0.3434\n",
            "\n",
            "--- 7. Interpretation ---\n",
            "Our model can explain 87.75% of the variance in (log-transformed) Revenue.\n",
            "This is a very strong result!\n",
            "\n",
            "--- Most Important Features (Model Coefficients) ---\n",
            "Quantity                       0.398031\n",
            "Category_Electronics           0.234830\n",
            "Category_Home & Furniture      0.170392\n",
            "Category_Clothing & Apparel    0.100134\n",
            "Region_West                    0.003649\n",
            "Unit_Price                     0.002362\n",
            "Region_East                    0.001419\n",
            "Profit                         0.000683\n",
            "Region_South                  -0.003014\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modeling - Diagnosing Data Leakage"
      ],
      "metadata": {
        "id": "4uX7sKSuee_H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 1. INSTALL THE NEW LIBRARY ---\n",
        "# You only need to run this line once!\n",
        "!pip install scikit-posthocs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vbBzyEsmP3ed",
        "outputId": "e2fcafaf-f92b-4658-adf6-2c5b65f2679e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-posthocs\n",
            "  Downloading scikit_posthocs-0.11.4-py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from scikit-posthocs) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.9.0 in /usr/local/lib/python3.12/dist-packages (from scikit-posthocs) (1.16.2)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.12/dist-packages (from scikit-posthocs) (0.14.5)\n",
            "Requirement already satisfied: pandas>=0.20.0 in /usr/local/lib/python3.12/dist-packages (from scikit-posthocs) (2.2.2)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.12/dist-packages (from scikit-posthocs) (0.13.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (from scikit-posthocs) (3.10.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (4.60.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib->scikit-posthocs) (3.2.5)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.12/dist-packages (from statsmodels->scikit-posthocs) (1.0.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas>=0.20.0->scikit-posthocs) (1.17.0)\n",
            "Downloading scikit_posthocs-0.11.4-py3-none-any.whl (33 kB)\n",
            "Installing collected packages: scikit-posthocs\n",
            "Successfully installed scikit-posthocs-0.11.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import scikit_posthocs as sp # Our new library for post-hoc tests\n",
        "\n",
        "# --- 2. RELOAD AND PREPARE DATA ---\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "# --- 3. RUN THE POST-HOC TEST ---\n",
        "print(\"--- Dunn's Post-Hoc Test for Profit by Category ---\")\n",
        "\n",
        "# We run the Dunn's test directly on our DataFrame.\n",
        "# val_col = 'Profit' (the number we are testing)\n",
        "# group_col = 'Category' (the groups we are comparing)\n",
        "# p_adjust = 'bonferroni' (This is a standard statistical correction.\n",
        "#                         It makes our test stricter to avoid false positives\n",
        "#                         when running so many comparisons at once.)\n",
        "\n",
        "dunn_results = sp.posthoc_dunn(df, val_col='Profit', group_col='Category', p_adjust='bonferroni')\n",
        "\n",
        "print(\"P-Value Matrix (p < 0.05 is a significant difference):\")\n",
        "print(dunn_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tj9C2BOZP9H9",
        "outputId": "c76342ff-c3dd-48b9-cc5b-804c95b54e99"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Dunn's Post-Hoc Test for Profit by Category ---\n",
            "P-Value Matrix (p < 0.05 is a significant difference):\n",
            "                    Accessories  Clothing & Apparel    Electronics  \\\n",
            "Accessories                 1.0        0.000000e+00   0.000000e+00   \n",
            "Clothing & Apparel          0.0        1.000000e+00  1.270733e-118   \n",
            "Electronics                 0.0       1.270733e-118   1.000000e+00   \n",
            "Home & Furniture            0.0        0.000000e+00   0.000000e+00   \n",
            "\n",
            "                    Home & Furniture  \n",
            "Accessories                      0.0  \n",
            "Clothing & Apparel               0.0  \n",
            "Electronics                      0.0  \n",
            "Home & Furniture                 1.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1. RELOAD AND PREPARE DATA ---\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "# --- 2. CONVERT 'Order_Date' TO DATETIME ---\n",
        "# This is the most important new step!\n",
        "# We tell pandas that this column is a date, not just text.\n",
        "# 'format='%m-%d-%y'' tells pandas our date format is Month-Day-Year (e.g., 08-23-23)\n",
        "df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%m-%d-%y')\n",
        "\n",
        "print(\"--- 2. 'Order_Date' column converted to datetime ---\")\n",
        "print(df.info()) # You will now see 'Order_Date' as 'datetime64[ns]'\n",
        "\n",
        "\n",
        "# --- 3. EXTRACT NEW TIME-BASED FEATURES ---\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "print(\"--- 3. Extracting new features from 'Order_Date' ---\")\n",
        "\n",
        "# Extract the month number (1 = Jan, 12 = Dec)\n",
        "df['Order_Month'] = df['Order_Date'].dt.month\n",
        "\n",
        "# Extract the day of the week (0 = Monday, 6 = Sunday)\n",
        "df['Order_Day_of_Week'] = df['Order_Date'].dt.dayofweek\n",
        "\n",
        "# We can also map the month to a season for a 'broader' feature\n",
        "def get_season(month):\n",
        "    if month in [12, 1, 2]:\n",
        "        return 'Winter'\n",
        "    elif month in [3, 4, 5]:\n",
        "        return 'Spring'\n",
        "    elif month in [6, 7, 8]:\n",
        "        return 'Summer'\n",
        "    else: # 9, 10, 11\n",
        "        return 'Fall'\n",
        "\n",
        "df['Season'] = df['Order_Month'].apply(get_season)\n",
        "\n",
        "print(\"New time-based features created!\")\n",
        "print(df.head())\n",
        "\n",
        "\n",
        "# --- 4. VISUALIZE OUR NEW 'Order_Month' FEATURE ---\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "print(\"--- 4. Visualizing Revenue by Month ---\")\n",
        "\n",
        "# Group the data by our new 'Order_Month' column and sum the 'Revenue'\n",
        "monthly_revenue = df.groupby('Order_Month')['Revenue'].sum().reset_index()\n",
        "\n",
        "# Create a bar plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(data=monthly_revenue, x='Order_Month', y='Revenue', palette='viridis')\n",
        "plt.title('Total Revenue by Month', fontsize=16)\n",
        "plt.xlabel('Month', fontsize=12)\n",
        "plt.ylabel('Total Revenue', fontsize=12)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "WwMtywytQ84V",
        "outputId": "72cb9044-e875-4e29-9b60-486a76ce22ee"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 2. 'Order_Date' column converted to datetime ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200000 entries, 0 to 199999\n",
            "Data columns (total 14 columns):\n",
            " #   Column         Non-Null Count   Dtype         \n",
            "---  ------         --------------   -----         \n",
            " 0   Order_ID       200000 non-null  int64         \n",
            " 1   Order_Date     200000 non-null  datetime64[ns]\n",
            " 2   Customer_Name  200000 non-null  object        \n",
            " 3   City           200000 non-null  object        \n",
            " 4   State          200000 non-null  object        \n",
            " 5   Region         200000 non-null  object        \n",
            " 6   Country        200000 non-null  object        \n",
            " 7   Category       200000 non-null  object        \n",
            " 8   Sub_Category   200000 non-null  object        \n",
            " 9   Product_Name   200000 non-null  object        \n",
            " 10  Quantity       200000 non-null  int64         \n",
            " 11  Unit_Price     200000 non-null  float64       \n",
            " 12  Revenue        200000 non-null  float64       \n",
            " 13  Profit         200000 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(3), int64(2), object(8)\n",
            "memory usage: 21.4+ MB\n",
            "None\n",
            "\n",
            "==================================================\n",
            "\n",
            "--- 3. Extracting new features from 'Order_Date' ---\n",
            "New time-based features created!\n",
            "   Order_ID Order_Date     Customer_Name          City        State  Region  \\\n",
            "0         1 2023-08-23      Bianca Brown       Jackson  Mississippi   South   \n",
            "1         2 2024-12-20     Jared Edwards  Grand Rapids     Michigan  Centre   \n",
            "2         3 2024-01-29      Susan Valdez   Minneapolis    Minnesota  Centre   \n",
            "3         4 2024-11-29     Tina Williams   Tallahassee      Florida   South   \n",
            "4         5 2023-09-21  Catherine Gordon     Baltimore     Maryland    East   \n",
            "\n",
            "         Country            Category       Sub_Category      Product_Name  \\\n",
            "0  United States         Accessories  Small Electronics        Phone Case   \n",
            "1  United States         Accessories  Small Electronics    Charging Cable   \n",
            "2  United States  Clothing & Apparel         Sportswear  Nike Air Force 1   \n",
            "3  United States  Clothing & Apparel         Sportswear  Adidas Tracksuit   \n",
            "4  United States         Accessories               Bags          Backpack   \n",
            "\n",
            "   Quantity  Unit_Price  Revenue  Profit  Order_Month  Order_Day_of_Week  \\\n",
            "0         3      201.01   603.03  221.49            8                  2   \n",
            "1         4       74.30   297.20   97.09           12                  4   \n",
            "2         1       68.19    68.19   25.47            1                  0   \n",
            "3         3      209.64   628.92  231.38           11                  4   \n",
            "4         1      216.63   216.63   42.46            9                  3   \n",
            "\n",
            "   Season  \n",
            "0  Summer  \n",
            "1  Winter  \n",
            "2  Winter  \n",
            "3    Fall  \n",
            "4    Fall  \n",
            "\n",
            "==================================================\n",
            "\n",
            "--- 4. Visualizing Revenue by Month ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3540205216.py:56: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=monthly_revenue, x='Order_Month', y='Revenue', palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# --- 1. FULL DATA PREPARATION PIPELINE ---\n",
        "\n",
        "# Load data and clean column names\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "# Task 1: Create target variable 'log_Revenue'\n",
        "df['log_Revenue'] = np.log1p(df['Revenue'])\n",
        "\n",
        "# Task 2: Encode Categorical Features\n",
        "df = pd.concat([df, pd.get_dummies(df[['Category', 'Region']], drop_first=True)], axis=1)\n",
        "\n",
        "# Task 3: (CORRECTED) Engineer Date Features\n",
        "df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%m-%d-%y')\n",
        "df['Order_Month'] = df['Order_Date'].dt.month\n",
        "df['Order_Day_of_Week'] = df['Order_Date'].dt.dayofweek\n",
        "\n",
        "# --- THIS IS THE FIX ---\n",
        "# Use 'prefix' to create clear column names like 'Month_2', 'Day_1', etc.\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Month'], prefix='Month', drop_first=True, dtype=bool)], axis=1)\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Day_of_Week'], prefix='Day', drop_first=True, dtype=bool)], axis=1)\n",
        "\n",
        "print(\"--- 1. Full Data Prep Complete. All features are encoded. ---\")\n",
        "\n",
        "\n",
        "# --- 2. DEFINE OUR 'X' (Features V2) and 'y' (Target) ---\n",
        "print(\"--- 2. Defining NEW Features (X) and Target (y) ---\")\n",
        "\n",
        "y = df['log_Revenue']\n",
        "\n",
        "# Start with our original 9 features\n",
        "feature_columns = [\n",
        "    'Quantity',\n",
        "    'Unit_Price',\n",
        "    'Profit',\n",
        "    'Category_Clothing & Apparel', 'Category_Electronics', 'Category_Home & Furniture',\n",
        "    'Region_East', 'Region_South', 'Region_West'\n",
        "]\n",
        "\n",
        "# --- THIS IS THE SECOND FIX ---\n",
        "# Find all columns that START WITH 'Month_' or 'Day_'\n",
        "new_date_features = [col for col in df.columns if col.startswith('Month_') or col.startswith('Day_')]\n",
        "\n",
        "print(f\"Found {len(new_date_features)} new date-based features.\")\n",
        "feature_columns.extend(new_date_features)\n",
        "\n",
        "X = df[feature_columns]\n",
        "\n",
        "print(f\"Features 'X' are now correctly defined with {len(feature_columns)} columns.\\n\")\n",
        "\n",
        "\n",
        "# --- 3. SPLIT, TRAIN, AND EVALUATE (Same as before) ---\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model_v2_1 = LinearRegression()\n",
        "model_v2_1.fit(X_train, y_train)\n",
        "y_pred_v2_1 = model_v2_1.predict(X_test)\n",
        "r2_v2_1 = r2_score(y_test, y_pred_v2_1)\n",
        "old_r2 = 0.8775 # Our V1 score\n",
        "\n",
        "# --- 4. THE MOMENT OF TRUTH: COMPARE RESULTS ---\n",
        "print(\"--- 4. Model V2.1 Evaluation ---\")\n",
        "print(f\"Original Model R² (V1): {old_r2}\")\n",
        "print(f\"New Model R² (V2.1):    {r2_v2_1:.4f}\")\n",
        "\n",
        "# --- 5. INTERPRETATION (FIXED) ---\n",
        "improvement = r2_v2_1 - old_r2\n",
        "\n",
        "if improvement > 0.0001:\n",
        "    print(f\"\\nImprovement: +{improvement:.4f}\")\n",
        "    print(f\"By adding date features, our model's explanatory power increased!\")\n",
        "elif improvement < -0.0001:\n",
        "    print(f\"\\nDecrease: {improvement:.4f}\")\n",
        "    print(f\"Our new features actually made the model slightly worse (this can happen!).\")\n",
        "else:\n",
        "    print(f\"\\nNo significant change.\")\n",
        "    print(f\"The date features did not provide new predictive power for this model.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BcaU28obS42K",
        "outputId": "59c788e8-893a-4223-9d4d-06447b6e8a43"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Full Data Prep Complete. All features are encoded. ---\n",
            "--- 2. Defining NEW Features (X) and Target (y) ---\n",
            "Found 17 new date-based features.\n",
            "Features 'X' are now correctly defined with 26 columns.\n",
            "\n",
            "--- 4. Model V2.1 Evaluation ---\n",
            "Original Model R² (V1): 0.8775\n",
            "New Model R² (V2.1):    0.8775\n",
            "\n",
            "No significant change.\n",
            "The date features did not provide new predictive power for this model.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "# --- NEW MODEL ---\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# --- 1. FULL DATA PREPARATION PIPELINE (Same as before) ---\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "df['log_Revenue'] = np.log1p(df['Revenue'])\n",
        "df = pd.concat([df, pd.get_dummies(df[['Category', 'Region']], drop_first=True)], axis=1)\n",
        "df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%m-%d-%y')\n",
        "df['Order_Month'] = df['Order_Date'].dt.month\n",
        "df['Order_Day_of_Week'] = df['Order_Date'].dt.dayofweek\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Month'], prefix='Month', drop_first=True, dtype=bool)], axis=1)\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Day_of_Week'], prefix='Day', drop_first=True, dtype=bool)], axis=1)\n",
        "print(\"--- 1. Data Prep Complete ---\")\n",
        "\n",
        "y = df['log_Revenue']\n",
        "\n",
        "# --- 2. DEFINE V1 and V2.1 FEATURE SETS ---\n",
        "\n",
        "# V1 Features (Original 9)\n",
        "features_v1 = [\n",
        "    'Quantity', 'Unit_Price', 'Profit',\n",
        "    'Category_Clothing & Apparel', 'Category_Electronics', 'Category_Home & Furniture',\n",
        "    'Region_East', 'Region_South', 'Region_West'\n",
        "]\n",
        "X_v1 = df[features_v1]\n",
        "\n",
        "# V2.1 Features (All 26)\n",
        "features_v2_1 = features_v1.copy() # Start with the original 9\n",
        "new_date_features = [col for col in df.columns if col.startswith('Month_') or col.startswith('Day_')]\n",
        "features_v2_1.extend(new_date_features)\n",
        "X_v2_1 = df[features_v2_1]\n",
        "\n",
        "print(f\"V1 features: {len(features_v1)} columns\")\n",
        "print(f\"V2.1 features: {len(features_v2_1)} columns\\n\")\n",
        "\n",
        "# --- 3. TRAIN AND EVALUATE V1 (Random Forest) ---\n",
        "print(\"--- Training V1 (Random Forest) ---\")\n",
        "# Split data\n",
        "X_train_v1, X_test_v1, y_train_v1, y_test_v1 = train_test_split(X_v1, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create the Random Forest model\n",
        "# n_estimators=50 means 50 trees.\n",
        "# n_jobs=-1 uses all your computer's power to run faster.\n",
        "rf_model_v1 = RandomForestRegressor(n_estimators=50, random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the model\n",
        "rf_model_v1.fit(X_train_v1, y_train_v1)\n",
        "\n",
        "# Evaluate V1\n",
        "y_pred_v1 = rf_model_v1.predict(X_test_v1)\n",
        "r2_v1 = r2_score(y_test_v1, y_pred_v1)\n",
        "\n",
        "print(f\"V1 R² Score (Random Forest): {r2_v1:.4f}\\n\")\n",
        "\n",
        "\n",
        "# --- 4. TRAIN AND EVALUATE V2.1 (Random Forest) ---\n",
        "print(\"--- Training V2.1 (Random Forest with Date Features) ---\")\n",
        "# Split data\n",
        "X_train_v2_1, X_test_v2_1, y_train_v2_1, y_test_v2_1 = train_test_split(X_v2_1, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create the second model\n",
        "rf_model_v2_1 = RandomForestRegressor(n_estimators=50, random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the second model\n",
        "rf_model_v2_1.fit(X_train_v2_1, y_train_v2_1)\n",
        "\n",
        "# Evaluate V2.1\n",
        "y_pred_v2_1 = rf_model_v2_1.predict(X_test_v2_1)\n",
        "r2_v2_1 = r2_score(y_test_v2_1, y_pred_v2_1)\n",
        "\n",
        "print(f\"V2.1 R² Score (Random Forest): {r2_v2_1:.4f}\\n\")\n",
        "\n",
        "# --- 5. FINAL COMPARISON ---\n",
        "print(\"--- Random Forest Model Comparison ---\")\n",
        "print(f\"V1 Score (no dates):   {r2_v1:.4f}\")\n",
        "print(f\"V2.1 Score (with dates): {r2_v2_1:.4f}\")\n",
        "\n",
        "improvement = r2_v2_1 - r2_v1\n",
        "\n",
        "if improvement > 0.0001:\n",
        "    print(f\"\\nImprovement: +{improvement:.4f}\")\n",
        "    print(f\"SUCCESS! The Random Forest was smart enough to use the date features!\")\n",
        "else:\n",
        "    print(f\"\\nNo significant change.\")\n",
        "    print(f\"Even the Random Forest is dominated by the leaky features.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S_7zsxcVUGwC",
        "outputId": "c338fe55-c3e9-4fbd-8f40-e1c4c9395831"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Data Prep Complete ---\n",
            "V1 features: 9 columns\n",
            "V2.1 features: 26 columns\n",
            "\n",
            "--- Training V1 (Random Forest) ---\n",
            "V1 R² Score (Random Forest): 1.0000\n",
            "\n",
            "--- Training V2.1 (Random Forest with Date Features) ---\n",
            "V2.1 R² Score (Random Forest): 1.0000\n",
            "\n",
            "--- Random Forest Model Comparison ---\n",
            "V1 Score (no dates):   1.0000\n",
            "V2.1 Score (with dates): 1.0000\n",
            "\n",
            "No significant change.\n",
            "Even the Random Forest is dominated by the leaky features.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# --- 1. FULL DATA PREPARATION PIPELINE (Same as before) ---\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "# No log_Revenue this time!\n",
        "df = pd.concat([df, pd.get_dummies(df[['Category', 'Region']], drop_first=True)], axis=1)\n",
        "df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%m-%d-%y')\n",
        "df['Order_Month'] = df['Order_Date'].dt.month\n",
        "df['Order_Day_of_Week'] = df['Order_Date'].dt.dayofweek\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Month'], prefix='Month', drop_first=True, dtype=bool)], axis=1)\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Day_of_Week'], prefix='Day', drop_first=True, dtype=bool)], axis=1)\n",
        "print(\"--- 1. Data Prep Complete ---\")\n",
        "\n",
        "# --- 2. DEFINE OUR \"REAL\" X and y ---\n",
        "print(\"--- 2. Defining 'Real' Features (X) and Target (y) ---\")\n",
        "\n",
        "# --- NEW TARGET ---\n",
        "y = df['Quantity']\n",
        "\n",
        "# --- NEW FEATURE SET (NO LEAKAGE) ---\n",
        "# We are REMOVING 'Revenue' and 'Profit'\n",
        "feature_columns = [\n",
        "    'Unit_Price',  # We know the price of the item\n",
        "    'Category_Clothing & Apparel', 'Category_Electronics', 'Category_Home & Furniture',\n",
        "    'Region_East', 'Region_South', 'Region_West'\n",
        "]\n",
        "# Add our date features\n",
        "new_date_features = [col for col in df.columns if col.startswith('Month_') or col.startswith('Day_')]\n",
        "feature_columns.extend(new_date_features)\n",
        "\n",
        "X = df[feature_columns]\n",
        "\n",
        "print(f\"New Target: 'Quantity'\")\n",
        "print(f\"Features 'X' (No Leakage): {len(feature_columns)} columns\\n\")\n",
        "\n",
        "# --- 3. TRAIN AND EVALUATE (Model V3) ---\n",
        "print(\"--- Training V3 (Predicting Quantity) ---\")\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create the Random Forest model\n",
        "rf_model_v3 = RandomForestRegressor(n_estimators=50, random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the model\n",
        "rf_model_v3.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate V3\n",
        "y_pred_v3 = rf_model_v3.predict(X_test)\n",
        "r2_v3 = r2_score(y_test, y_pred_v3)\n",
        "\n",
        "# --- 4. FINAL \"REAL\" RESULTS ---\n",
        "print(\"\\n--- 4. 'Real' Model Evaluation ---\")\n",
        "print(f\"Model V3 R² Score: {r2_v3:.4f}\")\n",
        "\n",
        "if r2_v3 < 0:\n",
        "    print(\"Our model is worse than just guessing the average. This is a tough problem!\")\n",
        "else:\n",
        "    print(f\"Our model can explain {r2_v3 * 100:.2f}% of the variance in 'Quantity'.\")\n",
        "    print(\"This is a 'real' and useful score!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v38ohBmaWEet",
        "outputId": "a065ab6c-2315-40be-a79e-bda196409dbc"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Data Prep Complete ---\n",
            "--- 2. Defining 'Real' Features (X) and Target (y) ---\n",
            "New Target: 'Quantity'\n",
            "Features 'X' (No Leakage): 24 columns\n",
            "\n",
            "--- Training V3 (Predicting Quantity) ---\n",
            "\n",
            "--- 4. 'Real' Model Evaluation ---\n",
            "Model V3 R² Score: -0.1553\n",
            "Our model is worse than just guessing the average. This is a tough problem!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modeling - The \"Real\" Classification Model"
      ],
      "metadata": {
        "id": "Z4ljFYTmeunX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "# --- NEW MODEL: CLASSIFIER ---\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "# --- NEW METRICS ---\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# --- 1. FULL DATA PREPARATION PIPELINE ---\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "df = pd.concat([df, pd.get_dummies(df[['Category', 'Region']], drop_first=True)], axis=1)\n",
        "df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%m-%d-%y')\n",
        "df['Order_Month'] = df['Order_Date'].dt.month\n",
        "df['Order_Day_of_Week'] = df['Order_Date'].dt.dayofweek\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Month'], prefix='Month', drop_first=True, dtype=bool)], axis=1)\n",
        "df = pd.concat([df, pd.get_dummies(df['Order_Day_of_Week'], prefix='Day', drop_first=True, dtype=bool)], axis=1)\n",
        "print(\"--- 1. Data Prep Complete ---\")\n",
        "\n",
        "# --- 2. DEFINE OUR \"CLASSIFICATION\" X and y ---\n",
        "print(\"--- 2. Defining 'Classification' Features (X) and Target (y) ---\")\n",
        "\n",
        "# --- NEW TARGET (y): Create 3 'bins' for Quantity ---\n",
        "def create_quantity_bins(quantity):\n",
        "    if quantity == 1:\n",
        "        return '1'\n",
        "    elif quantity == 2:\n",
        "        return '2'\n",
        "    else:\n",
        "        return '3+'\n",
        "\n",
        "df['Quantity_Bin'] = df['Quantity'].apply(create_quantity_bins)\n",
        "y = df['Quantity_Bin']\n",
        "\n",
        "# --- NEW FEATURE SET (X): Same as before (No Leakage) ---\n",
        "feature_columns = [\n",
        "    'Unit_Price',\n",
        "    'Category_Clothing & Apparel', 'Category_Electronics', 'Category_Home & Furniture',\n",
        "    'Region_East', 'Region_South', 'Region_West'\n",
        "]\n",
        "new_date_features = [col for col in df.columns if col.startswith('Month_') or col.startswith('Day_')]\n",
        "feature_columns.extend(new_date_features)\n",
        "X = df[feature_columns]\n",
        "\n",
        "print(f\"New Target: 'Quantity_Bin'\")\n",
        "print(f\"Features 'X' (No Leakage): {len(feature_columns)} columns\\n\")\n",
        "print(\"Target bins distribution:\\n\", y.value_counts(normalize=True))\n",
        "\n",
        "# --- 3. TRAIN AND EVALUATE (Model V4) ---\n",
        "print(\"\\n--- Training V4 (Predicting Quantity Bin) ---\")\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "# 'stratify=y' is important: it makes sure our test/train sets have the same % of 1s, 2s, and 3+\n",
        "\n",
        "# Create the Random Forest CLASSIFIER\n",
        "rf_model_v4 = RandomForestClassifier(n_estimators=50, random_state=42, n_jobs=-1)\n",
        "\n",
        "# Train the model\n",
        "rf_model_v4.fit(X_train, y_train)\n",
        "\n",
        "# --- 4. FINAL \"REAL\" CLASSIFICATION RESULTS ---\n",
        "print(\"\\n--- 4. 'Real' Classification Model Evaluation ---\")\n",
        "y_pred_v4 = rf_model_v4.predict(X_test)\n",
        "\n",
        "# Calculate Accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred_v4)\n",
        "print(f\"Overall Accuracy: {accuracy * 100:.2f}%\\n\")\n",
        "\n",
        "# Print the detailed report\n",
        "print(\"--- Classification Report ---\")\n",
        "print(classification_report(y_test, y_pred_v4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zUXeqA2lXTau",
        "outputId": "34ce4ed7-217e-4e0d-ec3b-e60c7886273a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Data Prep Complete ---\n",
            "--- 2. Defining 'Classification' Features (X) and Target (y) ---\n",
            "New Target: 'Quantity_Bin'\n",
            "Features 'X' (No Leakage): 24 columns\n",
            "\n",
            "Target bins distribution:\n",
            " Quantity_Bin\n",
            "1     0.50705\n",
            "2     0.26030\n",
            "3+    0.23265\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "--- Training V4 (Predicting Quantity Bin) ---\n",
            "\n",
            "--- 4. 'Real' Classification Model Evaluation ---\n",
            "Overall Accuracy: 37.87%\n",
            "\n",
            "--- Classification Report ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.50      0.51      0.51     20282\n",
            "           2       0.26      0.26      0.26     10412\n",
            "          3+       0.23      0.23      0.23      9306\n",
            "\n",
            "    accuracy                           0.38     40000\n",
            "   macro avg       0.33      0.33      0.33     40000\n",
            "weighted avg       0.38      0.38      0.38     40000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "# --- 1. RELOAD AND PREPARE DATA ---\n",
        "file_name = '/content/product_sales_dataset_final.csv'\n",
        "df = pd.read_csv(file_name)\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "# --- 2. PREPARE THE TEXT DATA ---\n",
        "# We'll use the 'Sub_Category' and 'Product_Name' to create a full description\n",
        "df['Full_Product_Name'] = df['Sub_Category'] + ' ' + df['Product_Name']\n",
        "\n",
        "print(\"--- 1. Analyzing text from 'Full_Product_Name' ---\")\n",
        "print(df['Full_Product_Name'].head())\n",
        "\n",
        "# --- 3. RUN THE NLP WORD COUNTER (CountVectorizer) ---\n",
        "# stop_words='english' removes common words like 'and', 'the', 'for'\n",
        "# max_features=20 tells it to only find the Top 20 most common words\n",
        "vectorizer = CountVectorizer(stop_words='english', max_features=20)\n",
        "\n",
        "# \"fit\" the vectorizer to our 200,000 product names\n",
        "vectorizer.fit(df['Full_Product_Name'])\n",
        "\n",
        "# --- 4. SHOW THE RESULTS ---\n",
        "print(\"\\n--- 2. Top 20 Most Common Words in Product Names ---\")\n",
        "print(vectorizer.get_feature_names_out())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MGPCl_czYsfY",
        "outputId": "6e8924b7-9970-41f0-dd89-ff7317c7c6fa"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Analyzing text from 'Full_Product_Name' ---\n",
            "0        Small Electronics Phone Case\n",
            "1    Small Electronics Charging Cable\n",
            "2         Sportswear Nike Air Force 1\n",
            "3         Sportswear Adidas Tracksuit\n",
            "4                       Bags Backpack\n",
            "Name: Full_Product_Name, dtype: object\n",
            "\n",
            "--- 2. Top 20 Most Common Words in Product Names ---\n",
            "['accessories' 'air' 'bags' 'bedding' 'decor' 'electronics' 'footwear'\n",
            " 'furniture' 'home' 'kids' 'kitchenware' 'men' 'nike' 'small' 'sportswear'\n",
            " 'storage' 'watch' 'wear' 'wearable' 'women']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Final Conclusion & Recommendations\n",
        "\n",
        "This project began as a statistical analysis to find the drivers of sales revenue and ended as a realistic data science investigation into predicting customer behavior.\n",
        "\n",
        "### Part 1: Statistical Findings\n",
        "\n",
        "* **Distribution:** `Revenue` and `Profit` data are **not normally distributed** but are heavily right-skewed. This required the use of non-parametric statistical tests.\n",
        "* **Hypothesis Tests:**\n",
        "    * A **Mann-Whitney U test** showed a statistically significant difference in `Revenue` between the East and West regions ($p \\approx 0$).\n",
        "    * A **Kruskal-Wallis test** showed a significant difference in `Profit` across all product `Category` groups ($p \\approx 0$).\n",
        "    * A **Dunn's post-hoc test** confirmed this, proving that all four categories (`Accessories`, `Clothing`, `Electronics`, `Home & Furniture`) have unique and statistically different profit profiles from one another.\n",
        "* **Feature Engineering:**\n",
        "    * Engineering features from the `Order_Date` column revealed a strong **seasonal sales spike in Q4** (October, November, and December).\n",
        "\n",
        "---\n",
        "\n",
        "### Part 2: Modeling Journey & Diagnosis\n",
        "\n",
        "1.  **Model V1 (Data Leakage):** An initial `RandomForestRegressor` built to predict `log_Revenue` achieved a \"perfect\" $R^2$ of **1.0**. This was immediately diagnosed as **Data Leakage**, as the model was \"cheating\" by using features like `Quantity` and `Unit_Price`, which are part of the formula for `Revenue`.\n",
        "\n",
        "2.  **Model V3 (Wrong Tool):** To fix the leakage, the goal was changed to predict `Quantity` using only non-leaky features (e.g., `Unit_Price`, `Category`, `Month`). This `RandomForestRegressor` failed with a **negative $R^2$ score**.\n",
        "    * **Diagnosis:** The model failed because `Quantity` is not a continuous variable. Over 51% of all orders are for a single item, making it a classification or \"count\" problem, not a regression one.\n",
        "\n",
        "3.  **Model V4 (Final, \"Real\" Model):** The problem was correctly re-framed as a **Classification** task to predict which \"bucket\" a sale would fall into: \"1 item\", \"2 items\", or"
      ],
      "metadata": {
        "id": "TJ0T7YjOfGCf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "gEFdVHmufXfT"
      }
    }
  ]
}